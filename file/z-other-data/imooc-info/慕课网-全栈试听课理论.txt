重点理论：
1.单纯interface可以统一方法的调用，但是它不能统一对象的实例化
2.面向对象主要做两件事：实例化对象 调用方法（完成业务逻辑）
3.只有一段代码中没有new的出现，才能保持代码的相对稳定，才能逐步实现OCP
4.上面的这句话只是表象，实质是如果一段代码要保持稳定，就不应该负责对象的实例化
5.对象实例化是不能消除的
6.把对象实例化的过程，转移到其他代码片段里
7.代码中总是会存在不稳定，隔离这些不稳稳定，保证其他的代码是稳定的
8.变化造成了不稳定
9.配置文件属于系统外部的，而不属于代码本身


计算机代码
现实世界规律 业务 映射 投影

1.IOC DI DIP
DIP: Denpendency Inversion Principle 依赖倒置

高层（抽象）模块不应该依赖低层（具体）模块，两者都应该依赖抽象
抽象不应该依赖细节
细节应该依赖抽象


1.属性注入 set()
2.构造注入 构造方法()
3.接口注入

IOC 抽象 模糊 实现
实现DI