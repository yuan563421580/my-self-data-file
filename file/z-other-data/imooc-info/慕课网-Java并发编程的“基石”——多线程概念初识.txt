1.操作系统、进程、线程的包含关系
宏观：操作系统是包含多个进程的容器，而每个进程又都是容纳多个线程的容器
2.进程定义：进程是程序（这里可以理解为我们写的代码）的真正运行实例，是资源分配的基本单位。
3.线程定义：线程是CPU的基本调度单位，每个线程执行的都是进程代码的某个字段。
4.多线程的概念：如果一个程序允许两个或以上的线程，那么它就是多线程程序。多线程是指在单个进程中运行多个线程。
5.并行的概念：真正的“同时”运行----在同一时刻，有多个任务同时执行。
6.并发的2种概念：
	6.1).形容多个任务的执行状态：两个或多个任务可以在重叠的时间段内启动，运行和完成。
		并行（两个线程同时执行）一定是并发；并不一定意味着并发一定要求是并行。
	6.2).对“并发性”的简称：不同的部分可以无序或同时执行，且不影响最终的执行结果。
		此时，并行和并发的概念并不在同一维度上。
7.什么是高并发：高并发在业界通常被认为同时有很多个请求发送给服务器系统，因此服务器就好并行处理。
8.多线程和高并发是什么：（多线程）解决方案、（高并发）状态
	多线程解决的是高并发带来的线程安全问题、性能问题（提高硬件利用率）；
9.多线程和高并发的关系：其中一种重要的解决方案
10.高并发并不意味着是多线程：Redis（Redis底层用单线程处理的，但是吞吐量相当大）
11.高并发有哪些指标：
	11.a).QPS(Queries Per Second) 每秒查询数
	11.b).带宽
	11.c).PV(Page View) 综合访问量（点击量）
	11.d).UV(Unique Visitor) 在访问量（点击量）基础上去重
12.同步与异步：被调用者是否主动告诉调用者结果
	同步：同步异步这里这的是被调用者（也就是服务器）的行为，而不是请求方的行为。
			在没有得到结果之前，服务单就不返回任何结果。
	异步：调用在发出之后，服务端会立刻返回，告诉调用方“我收到你的请求了，我会处理的”。
13.阻塞与非阻塞：我是调用者，我调用一个东西后，结果返回前，是否还能做别的事
